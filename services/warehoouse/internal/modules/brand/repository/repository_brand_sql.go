// Code generated by candi v1.13.11.

package repository

import (
	"context"

	"github.com/google/uuid"
	"time"

	"monorepo/services/warehoouse/internal/modules/brand/domain"
	shareddomain "monorepo/services/warehoouse/pkg/shared/domain"

	"github.com/golangid/candi/candishared"
	"github.com/golangid/candi/tracer"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"monorepo/globalshared"
	"strings"
)

type brandRepoSQL struct {
	readDB, writeDB *gorm.DB
}

// NewBrandRepoSQL mongo repo constructor
func NewBrandRepoSQL(readDB, writeDB *gorm.DB) BrandRepository {
	return &brandRepoSQL{
		readDB, writeDB,
	}
}

func (r *brandRepoSQL) FetchAll(ctx context.Context, filter *domain.FilterBrand) (data []shareddomain.Brand, err error) {
	trace, ctx := tracer.StartTraceWithContext(ctx, "BrandRepoSQL:FetchAll")
	defer func() { trace.Finish(tracer.FinishWithError(err)) }()

	if filter.OrderBy == "" {
		filter.OrderBy = "updated_at"
	}

	err = r.setFilterBrand(globalshared.SetSpanToGorm(ctx, r.readDB), filter).Order(clause.OrderByColumn{
		Column: clause.Column{Name: filter.OrderBy},
		Desc:   strings.ToUpper(filter.Sort) == "DESC",
	}).Limit(filter.Limit).Offset(filter.CalculateOffset()).Find(&data).Error
	return
}

func (r *brandRepoSQL) Count(ctx context.Context, filter *domain.FilterBrand) (count int) {
	trace, ctx := tracer.StartTraceWithContext(ctx, "BrandRepoSQL:Count")
	defer trace.Finish()

	var total int64
	r.setFilterBrand(globalshared.SetSpanToGorm(ctx, r.readDB), filter).Model(&shareddomain.Brand{}).Count(&total)
	count = int(total)

	trace.Log("count", count)
	return
}

func (r *brandRepoSQL) Find(ctx context.Context, filter *domain.FilterBrand) (result shareddomain.Brand, err error) {
	trace, ctx := tracer.StartTraceWithContext(ctx, "BrandRepoSQL:Find")
	defer func() { trace.Finish(tracer.FinishWithError(err)) }()

	err = r.setFilterBrand(globalshared.SetSpanToGorm(ctx, r.readDB), filter).First(&result).Error
	return
}

func (r *brandRepoSQL) Save(ctx context.Context, data *shareddomain.Brand) (err error) {
	trace, ctx := tracer.StartTraceWithContext(ctx, "BrandRepoSQL:Save")
	defer func() { trace.Finish(tracer.FinishWithError(err)) }()
	trace.Log("data", data)

	db := r.writeDB
	if tx, ok := candishared.GetValueFromContext(ctx, candishared.ContextKeySQLTransaction).(*gorm.DB); ok {
		db = tx
	}
	data.UpdatedAt = time.Now()
	if data.CreatedAt.IsZero() {
		data.CreatedAt = time.Now()
	}
	if data.ID == "" {
		data.ID = uuid.NewString()
		err = globalshared.SetSpanToGorm(ctx, db).Create(data).Error
	} else {
		err = globalshared.SetSpanToGorm(ctx, db).Save(data).Error
	}
	return
}

func (r *brandRepoSQL) Delete(ctx context.Context, data *shareddomain.Brand) (err error) {
	trace, ctx := tracer.StartTraceWithContext(ctx, "BrandRepoSQL:Delete")
	defer func() { trace.Finish(tracer.FinishWithError(err)) }()

	db := r.writeDB
	if tx, ok := candishared.GetValueFromContext(ctx, candishared.ContextKeySQLTransaction).(*gorm.DB); ok {
		db = tx
	}
	err = globalshared.SetSpanToGorm(ctx, db).Delete(data).Error
	return
}

func (r *brandRepoSQL) setFilterBrand(db *gorm.DB, filter *domain.FilterBrand) *gorm.DB {

	if filter.ID != nil {
		db = db.Where("id = ?", *filter.ID)
	}
	if filter.Search != "" {
		db = db.Where("(title ILIKE '%%' || ? || '%%')", filter.Search)
	}

	for _, preload := range filter.Preloads {
		db = db.Preload(preload)
	}

	return db
}
