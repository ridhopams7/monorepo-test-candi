// Code generated by candi v1.13.11.

package resthandler

import (
	"encoding/json"
	"io"
	"net/http"

	"github.com/labstack/echo"

	"monorepo/services/warehoouse/internal/modules/brand/domain"
	"monorepo/services/warehoouse/pkg/shared/usecase"

	"github.com/golangid/candi/candihelper"
	"github.com/golangid/candi/candishared"
	"github.com/golangid/candi/codebase/factory/dependency"
	"github.com/golangid/candi/codebase/interfaces"
	"github.com/golangid/candi/tracer"
	"github.com/golangid/candi/wrapper"
)

// RestHandler handler
type RestHandler struct {
	mw        interfaces.Middleware
	uc        usecase.Usecase
	validator interfaces.Validator
}

// NewRestHandler create new rest handler
func NewRestHandler(uc usecase.Usecase, deps dependency.Dependency) *RestHandler {
	return &RestHandler{
		uc: uc, mw: deps.GetMiddleware(), validator: deps.GetValidator(),
	}
}

// Mount handler with root "/"
// handling version in here
func (h *RestHandler) Mount(root *echo.Group) {
	v1Root := root.Group(candihelper.V1)

	brand := v1Root.Group("/brand", echo.WrapMiddleware(h.mw.HTTPBearerAuth))
	brand.GET("", h.getAllBrand, echo.WrapMiddleware(h.mw.HTTPPermissionACL("getAllBrand")))
	brand.GET("/:id", h.getDetailBrandByID, echo.WrapMiddleware(h.mw.HTTPPermissionACL("getDetailBrand")))
	brand.POST("", h.createBrand, echo.WrapMiddleware(h.mw.HTTPPermissionACL("createBrand")))
	brand.PUT("/:id", h.updateBrand, echo.WrapMiddleware(h.mw.HTTPPermissionACL("updateBrand")))
	brand.DELETE("/:id", h.deleteBrand, echo.WrapMiddleware(h.mw.HTTPPermissionACL("deleteBrand")))
}

func (h *RestHandler) getAllBrand(c echo.Context) error {
	trace, ctx := tracer.StartTraceWithContext(c.Request().Context(), "BrandDeliveryREST:GetAllBrand")
	defer trace.Finish()

	tokenClaim := candishared.ParseTokenClaimFromContext(ctx) // must using HTTPBearerAuth in middleware for this handler

	var filter domain.FilterBrand
	if err := candihelper.ParseFromQueryParam(c.Request().URL.Query(), &filter); err != nil {
		return wrapper.NewHTTPResponse(http.StatusBadRequest, "Failed parse filter", err).JSON(c.Response())
	}

	if err := h.validator.ValidateDocument("brand/get_all", filter); err != nil {
		return wrapper.NewHTTPResponse(http.StatusBadRequest, "Failed validate filter", err).JSON(c.Response())
	}

	data, meta, err := h.uc.Brand().GetAllBrand(ctx, &filter)
	if err != nil {
		return wrapper.NewHTTPResponse(http.StatusBadRequest, err.Error()).JSON(c.Response())
	}

	message := "Success, with your user id (" + tokenClaim.Subject + ") and role (" + tokenClaim.Role + ")"
	return wrapper.NewHTTPResponse(http.StatusOK, message, meta, data).JSON(c.Response())
}

func (h *RestHandler) getDetailBrandByID(c echo.Context) error {
	trace, ctx := tracer.StartTraceWithContext(c.Request().Context(), "BrandDeliveryREST:GetDetailBrandByID")
	defer trace.Finish()

	data, err := h.uc.Brand().GetDetailBrand(ctx, c.Param("id"))
	if err != nil {
		return wrapper.NewHTTPResponse(http.StatusBadRequest, err.Error()).JSON(c.Response())
	}

	return wrapper.NewHTTPResponse(http.StatusOK, "Success", data).JSON(c.Response())
}

func (h *RestHandler) createBrand(c echo.Context) error {
	trace, ctx := tracer.StartTraceWithContext(c.Request().Context(), "BrandDeliveryREST:CreateBrand")
	defer trace.Finish()

	body, _ := io.ReadAll(c.Request().Body)
	if err := h.validator.ValidateDocument("brand/save", body); err != nil {
		return wrapper.NewHTTPResponse(http.StatusBadRequest, "Failed validate payload", err).JSON(c.Response())
	}

	var payload domain.RequestBrand
	if err := json.Unmarshal(body, &payload); err != nil {
		return wrapper.NewHTTPResponse(http.StatusBadRequest, err.Error()).JSON(c.Response())
	}

	err := h.uc.Brand().CreateBrand(ctx, &payload)
	if err != nil {
		return wrapper.NewHTTPResponse(http.StatusBadRequest, err.Error()).JSON(c.Response())
	}

	return wrapper.NewHTTPResponse(http.StatusCreated, "Success").JSON(c.Response())
}

func (h *RestHandler) updateBrand(c echo.Context) error {
	trace, ctx := tracer.StartTraceWithContext(c.Request().Context(), "BrandDeliveryREST:UpdateBrand")
	defer trace.Finish()

	body, _ := io.ReadAll(c.Request().Body)
	if err := h.validator.ValidateDocument("brand/save", body); err != nil {
		return wrapper.NewHTTPResponse(http.StatusBadRequest, "Failed validate payload", err).JSON(c.Response())
	}

	var payload domain.RequestBrand
	if err := json.Unmarshal(body, &payload); err != nil {
		return wrapper.NewHTTPResponse(http.StatusBadRequest, err.Error()).JSON(c.Response())
	}

	payload.ID = c.Param("id")
	err := h.uc.Brand().UpdateBrand(ctx, &payload)
	if err != nil {
		return wrapper.NewHTTPResponse(http.StatusBadRequest, err.Error()).JSON(c.Response())
	}

	return wrapper.NewHTTPResponse(http.StatusOK, "Success").JSON(c.Response())
}

func (h *RestHandler) deleteBrand(c echo.Context) error {
	trace, ctx := tracer.StartTraceWithContext(c.Request().Context(), "BrandDeliveryREST:DeleteBrand")
	defer trace.Finish()

	if err := h.uc.Brand().DeleteBrand(ctx, c.Param("id")); err != nil {
		return wrapper.NewHTTPResponse(http.StatusBadRequest, err.Error()).JSON(c.Response())
	}

	return wrapper.NewHTTPResponse(http.StatusOK, "Success").JSON(c.Response())
}
