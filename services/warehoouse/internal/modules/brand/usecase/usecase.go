// Code generated by candi v1.13.11.

package usecase

import (
	"context"

	"monorepo/services/warehoouse/internal/modules/brand/domain"
	"monorepo/services/warehoouse/pkg/shared/repository"
	"monorepo/services/warehoouse/pkg/shared/usecase/common"
	"github.com/golangid/candi/candishared"
	"github.com/golangid/candi/codebase/factory/dependency"
	"github.com/golangid/candi/codebase/factory/types"
	"github.com/golangid/candi/codebase/interfaces"
)

// BrandUsecase abstraction
type BrandUsecase interface {
	GetAllBrand(ctx context.Context, filter *domain.FilterBrand) (data []domain.ResponseBrand, meta candishared.Meta, err error)
	GetDetailBrand(ctx context.Context, id string) (data domain.ResponseBrand, err error)
	CreateBrand(ctx context.Context, data *domain.RequestBrand) (err error)
	UpdateBrand(ctx context.Context, data *domain.RequestBrand) (err error)
	DeleteBrand(ctx context.Context, id string) (err error)
}

type brandUsecaseImpl struct {
	sharedUsecase common.Usecase
	cache         interfaces.Cache
	repoSQL       repository.RepoSQL
	// repoMongo     repository.RepoMongo
	kafkaPub       interfaces.Publisher
}

// NewBrandUsecase usecase impl constructor
func NewBrandUsecase(deps dependency.Dependency) (BrandUsecase, func(sharedUsecase common.Usecase)) {
	uc := &brandUsecaseImpl{
		repoSQL:   repository.GetSharedRepoSQL(),
		// repoMongo: repository.GetSharedRepoMongo(),
	}
	if redisPool := deps.GetRedisPool(); redisPool != nil {
		uc.cache = redisPool.Cache()
	}
	if kafkaBroker := deps.GetBroker(types.Kafka); kafkaBroker != nil {
		uc.kafkaPub = kafkaBroker.GetPublisher()
	}
	return uc, func(sharedUsecase common.Usecase) {
		uc.sharedUsecase = sharedUsecase
	}
}
